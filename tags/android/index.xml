<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on 不忘初心</title>
    <link>https://chuxinshequ.github.io/tags/android.html</link>
    <description>Recent content in Android on 不忘初心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>本站聚合自群友公开发表的内容，版权归属于各位作者。</copyright>
    <lastBuildDate>Fri, 04 Aug 2017 15:32:49 +0000</lastBuildDate>
    
	<atom:link href="https://chuxinshequ.github.io/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android AES 加密、解密</title>
      <link>https://chuxinshequ.github.io/blog/kongqw/2017-08-04-android-aes-%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.html</link>
      <pubDate>Fri, 04 Aug 2017 15:32:49 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/kongqw/2017-08-04-android-aes-%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86.html</guid>
      <description>AES加密介绍
ASE 加密、解密的关键在于秘钥、只有使用加密时使用的秘钥，才可以解密。
生成秘钥的代码网上一大堆，下面的代码可生成一个秘钥
private SecretKey generateKey(String seed) throws Exception { // 获取秘钥生成器 KeyGenerator keyGenerator = KeyGenerator.getInstance(&amp;quot;AES&amp;quot;); // 通过种子初始化 SecureRandom secureRandom = new SecureRandom(); secureRandom.setSeed(seed.getBytes(&amp;quot;UTF-8&amp;quot;)); keyGenerator.init(128, secureRandom); // 生成秘钥并返回 return keyGenerator.generateKey(); }  然后使用秘钥进行加密
private byte[] encrypt(String content, SecretKey secretKey) throws Exception { // 秘钥 byte[] enCodeFormat = secretKey.getEncoded(); // 创建AES秘钥 SecretKeySpec key = new SecretKeySpec(enCodeFormat, &amp;quot;AES&amp;quot;); // 创建密码器 Cipher cipher = Cipher.getInstance(&amp;quot;AES&amp;quot;); // 初始化加密器 cipher.init(Cipher.ENCRYPT_MODE, key); // 加密 return cipher.</description>
    </item>
    
    <item>
      <title>Android蓝牙通信——AndroidBluetoothManager</title>
      <link>https://chuxinshequ.github.io/blog/kongqw/2017-03-16-android-%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1androidbluetoothmanager.html</link>
      <pubDate>Thu, 16 Mar 2017 18:24:36 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/kongqw/2017-03-16-android-%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1androidbluetoothmanager.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN

To get a Git project into your build:
Step 1. Add the JitPack repository to your build file
Add it in your root build.gradle at the end of repositories:
allprojects { repositories { ... maven { url &#39;https://jitpack.io&#39; } } }  Step 2. Add the dependency
dependencies { compile &#39;com.github.kongqw:AndroidBluetoothManager:1.0.0&#39; }  AndroidBluetoothManager
效果图 PNG
GIF
基础功能 添加权限 &amp;lt;uses-permission android:name=&amp;quot;android.permission.BLUETOOTH&amp;quot; /&amp;gt; &amp;lt;uses-permission android:name=&amp;quot;android.</description>
    </item>
    
    <item>
      <title>Android自定义雷达扫描控件</title>
      <link>https://chuxinshequ.github.io/blog/kongqw/2017-03-10-android%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9B%B7%E8%BE%BE%E6%89%AB%E6%8F%8F%E6%8E%A7%E4%BB%B6.html</link>
      <pubDate>Fri, 10 Mar 2017 18:28:14 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/kongqw/2017-03-10-android%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9B%B7%E8%BE%BE%E6%89%AB%E6%8F%8F%E6%8E%A7%E4%BB%B6.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN
Android 雷达扫描控件 
To get a Git project into your build:
Step 1. Add the JitPack repository to your build file
Add it in your root build.gradle at the end of repositories:
allprojects { repositories { ... maven { url &#39;https://jitpack.io&#39; } } }  Step 2. Add the dependency
dependencies { compile &#39;com.github.kongqw:AndroidRadarScanView:1.0.1&#39; }  源码：AndroidRadarScanView
效果图 XML &amp;lt;com.kongqw.radarscanviewlibrary.RadarScanView android:id=&amp;quot;@+id/radarScanView&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot; /&amp;gt;  初始化 radarScanView = (RadarScanView) findViewById(R.</description>
    </item>
    
    <item>
      <title>Android自定义摇杆</title>
      <link>https://chuxinshequ.github.io/blog/kongqw/2016-09-01-android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%91%87%E6%9D%86.html</link>
      <pubDate>Thu, 01 Sep 2016 17:37:11 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/kongqw/2016-09-01-android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%91%87%E6%9D%86.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN
效果图 源码 KqwRockerDemo
喜欢就给个star，谢谢！
功能  支持自适应大小 支持2个方向、4个方向、8个方向的摇动监听 支持摇动角度获取 可选回调模式 支持可摇动区域自定义 支持摇杆自定义 支持设置图片、色值、Shape图形  使用 &amp;lt;kong.qingwei.rockerlibrary.RockerView android:id=&amp;quot;@+id/rockerView_center&amp;quot; android:layout_width=&amp;quot;100dp&amp;quot; android:layout_height=&amp;quot;100dp&amp;quot; android:layout_centerHorizontal=&amp;quot;true&amp;quot; kongqw:areaBackground=&amp;quot;#FF333333&amp;quot; kongqw:rockerBackground=&amp;quot;#FF987654&amp;quot; kongqw:rockerRadius=&amp;quot;15dp&amp;quot; /&amp;gt;  参数    参数 是否必须 描述     areaBackground 可选 可摇动区域的背景   rockerBackground 可选 摇杆的背景   rockerRadius 可选 摇杆半径    设置回调方式 setCallBackMode(CallBackMode mode)  参数
   回调方式 描述     CALL_BACK_MODE_MOVE 有移动就立刻回调   CALL_BACK_MODE_STATE_CHANGE 状态有变化的时候回调    监听摇动角度 返回角度的取值范围：[0°,360°)</description>
    </item>
    
    <item>
      <title>Android输出正弦波音频信号(左右声道对称)</title>
      <link>https://chuxinshequ.github.io/blog/kongqw/2016-08-29-android%E8%BE%93%E5%87%BA%E6%AD%A3%E5%BC%A6%E6%B3%A2%E9%9F%B3%E9%A2%91%E4%BF%A1%E5%8F%B7-%E5%B7%A6%E5%8F%B3%E5%A3%B0%E9%81%93%E5%AF%B9%E7%A7%B0.html</link>
      <pubDate>Mon, 29 Aug 2016 15:01:34 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/kongqw/2016-08-29-android%E8%BE%93%E5%87%BA%E6%AD%A3%E5%BC%A6%E6%B3%A2%E9%9F%B3%E9%A2%91%E4%BF%A1%E5%8F%B7-%E5%B7%A6%E5%8F%B3%E5%A3%B0%E9%81%93%E5%AF%B9%E7%A7%B0.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN
需求：左右声道分别输出不同的音频数据，波形要是一个正弦波，左右声道还要对称！ 对硬件不是很了解，说是要通过音波避障。
效果图 之前已经介绍了如何在左右声道输出不同的音频数据。 那么这里主要介绍如何模拟出波形是正弦波的音频数据。
模拟正弦波 /** * 模拟正弦波音频数据 * @param isLeft 左右声道 * @return 音频数据 */ private short[] initData(boolean isLeft) { double phase = 0.0; int amp = 10000; short[] data = new short[bufferSize]; double phaseIncrement = (2 * Math.PI * mFrequency) / mSampleRateInHz; for (int i = 0; i &amp;lt; bufferSize; i++) { if (isLeft) { data[i] = (short) (amp * Math.sin(phase)); } else { data[i] = (short) (-amp * Math.</description>
    </item>
    
    <item>
      <title>Android左右声道的控制</title>
      <link>https://chuxinshequ.github.io/blog/kongqw/2016-08-26-android%E5%B7%A6%E5%8F%B3%E5%A3%B0%E9%81%93%E7%9A%84%E6%8E%A7%E5%88%B6.html</link>
      <pubDate>Fri, 26 Aug 2016 15:36:50 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/kongqw/2016-08-26-android%E5%B7%A6%E5%8F%B3%E5%A3%B0%E9%81%93%E7%9A%84%E6%8E%A7%E5%88%B6.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN
效果图 源码 AndroidSoundManagerDemo
我这里主要是用到了AudioTrack实现的左右声道的控制，手机一般都只有两个声道，即左声道和右声道，我们在输出的时候可以选择单声道，也可以选择双声道（立体声）。
查看了AudioTrack的API，提供了play()、pause()、stop()、write()等一系列的方法。 通过write()方法，可以实现将音频数据发送出去（播放出来）。
AudioTrack对象的构造 有三个构造方法
AudioTrack (int streamType, int sampleRateInHz, int channelConfig, int audioFormat, int bufferSizeInBytes, int mode) AudioTrack (int streamType, int sampleRateInHz, int channelConfig, int audioFormat, int bufferSizeInBytes, int mode, int sessionId) AudioTrack (AudioAttributes attributes, AudioFormat format, int bufferSizeInBytes, int mode, int sessionId)  主要参数有如下几个
 streamType：以什么形式播放
 STREAM_VOICE_CALL STREAM_SYSTEM STREAM_RING STREAM_MUSIC STREAM_ALARM STREAM_NOTIFICATION  sampleRateInHz：采样率
 channelConfig：声道
 AudioFormat.CHANNEL_OUT_MONO：输出单声道音频数据 AudioFormat.</description>
    </item>
    
    <item>
      <title>Android蓝牙通信</title>
      <link>https://chuxinshequ.github.io/blog/kongqw/2016-08-02-android%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1.html</link>
      <pubDate>Tue, 02 Aug 2016 17:44:54 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/kongqw/2016-08-02-android%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN
Android蓝牙通信 效果图  两台真机设备
 源码 GitHub
 关于蓝牙的开关控制，设置设备可见、搜索附近的蓝牙设备，已经封装到了 BluetoothManager 类
 关于设备的连接、通信。已经封装到了 BluetoothService 类
  注：下面的全部内容，主要是思路，具体的可以参考上面的源码，如果对你有帮助记得给个赞哦。
权限 &amp;lt;!-- 蓝牙的权限 --&amp;gt; &amp;lt;uses-permission android:name=&amp;quot;android.permission.BLUETOOTH&amp;quot; /&amp;gt; &amp;lt;uses-permission android:name=&amp;quot;android.permission.BLUETOOTH_ADMIN&amp;quot; /&amp;gt;  蓝牙的打开与关闭 开启蓝牙 mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); /** * 开启蓝牙 */ public void openBluetooth() { try { mBluetoothAdapter.enable(); } catch (Exception e) { e.printStackTrace(); } }  关闭蓝牙 mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter(); /** * 关闭蓝牙 */ public void closeBluetooth() { try { mBluetoothAdapter.</description>
    </item>
    
  </channel>
</rss>