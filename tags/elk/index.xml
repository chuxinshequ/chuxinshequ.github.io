<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elk on 不忘初心</title>
    <link>https://chuxinshequ.github.io/tags/elk.html</link>
    <description>Recent content in Elk on 不忘初心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>本站聚合自群友公开发表的内容，版权归属于各位作者。</copyright>
    <lastBuildDate>Mon, 20 Nov 2017 17:18:54 +0000</lastBuildDate>
    
	<atom:link href="https://chuxinshequ.github.io/tags/elk/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>异常检测之指数平滑（利用elasticsearch来实现）</title>
      <link>https://chuxinshequ.github.io/blog/thinkgamer/elk/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E4%B9%8B%E6%8C%87%E6%95%B0%E5%B9%B3%E6%BB%91%E5%88%A9%E7%94%A8elasticsearch%E6%9D%A5%E5%AE%9E%E7%8E%B0.html</link>
      <pubDate>Mon, 20 Nov 2017 17:18:54 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/thinkgamer/elk/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B%E4%B9%8B%E6%8C%87%E6%95%B0%E5%B9%B3%E6%BB%91%E5%88%A9%E7%94%A8elasticsearch%E6%9D%A5%E5%AE%9E%E7%8E%B0.html</guid>
      <description>指数平滑法是一种特殊的加权平均法，加权的特点是对离预测值较近的历史数据给予较大的权数，对离预测期较远的历史数据给予较小的权数，权数由近到远按指数规律递减，所以，这种预测方法被称为指数平滑法。它可分为一次指数平滑法、二次指数平滑法及更高次指数平滑法。 
关于指数平滑的得相关资料：  ES API接口： &amp;gt; https://github.com/IBBD/IBBD.github.io/blob/master/elk/aggregations-pipeline.md https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-movavg-aggregation.html
 理论概念 &amp;gt; http://blog.sina.com.cn/s/blog_4b9acb5201016nkd.html
  ES移动平均聚合：Moving Average的四种模型 simple 就是使用窗口内的值的和除于窗口值，通常窗口值越大，最后的结果越平滑: (a1 + a2 + &amp;hellip; + an) / n
curl -XPOST &#39;localhost:9200/_search?pretty&#39; -H &#39;Content-Type: application/json&#39; -d&#39; { &amp;quot;size&amp;quot;: 0, &amp;quot;aggs&amp;quot;: { &amp;quot;my_date_histo&amp;quot;:{ &amp;quot;date_histogram&amp;quot;:{ &amp;quot;field&amp;quot;:&amp;quot;date&amp;quot;, &amp;quot;interval&amp;quot;:&amp;quot;1M&amp;quot; }, &amp;quot;aggs&amp;quot;:{ &amp;quot;the_sum&amp;quot;:{ &amp;quot;sum&amp;quot;:{ &amp;quot;field&amp;quot;: &amp;quot;price&amp;quot; } }, &amp;quot;the_movavg&amp;quot;:{ &amp;quot;moving_avg&amp;quot;:{ &amp;quot;buckets_path&amp;quot;: &amp;quot;the_sum&amp;quot;, &amp;quot;window&amp;quot; : 30, &amp;quot;model&amp;quot; : &amp;quot;simple&amp;quot; } } } } } } &#39;  线性模型：Linear 对窗口内的值先做线性变换处理，再求平均：(a1 * 1 + a2 * 2 + &amp;hellip; + an * n) / (1 + 2 + &amp;hellip; + n)</description>
    </item>
    
    <item>
      <title>Elasticsearch-DSL部分集合</title>
      <link>https://chuxinshequ.github.io/blog/thinkgamer/elk/elasticsearch-dsl%E9%83%A8%E5%88%86%E9%9B%86%E5%90%88.html</link>
      <pubDate>Tue, 14 Nov 2017 17:26:48 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/thinkgamer/elk/elasticsearch-dsl%E9%83%A8%E5%88%86%E9%9B%86%E5%90%88.html</guid>
      <description>ELK是日志收集分析神器，在这篇文章中将会介绍一些ES的常用命令。
点击阅读：ELK Stack 从入门到放弃 
DSL中遇到的错误及解决办法 分片限制错误 Trying to query 2632 shards, which is over the limit of 1000. This limit exists because querying many shards at the same time can make the job of the coordinating node very CPU and/or memory intensive. It is usually a better idea to have a smaller number of larger shards. Update [action.search.shard_count.limit] to a greater value if you really want to query that many shards at the same time.</description>
    </item>
    
  </channel>
</rss>