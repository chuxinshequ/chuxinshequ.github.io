<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源 on 不忘初心</title>
    <link>https://chuxinshequ.github.io/categories/%E5%BC%80%E6%BA%90.html</link>
    <description>Recent content in 开源 on 不忘初心</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright (c) 2015 - 2016, YourCompany; all rights reserved.</copyright>
    <lastBuildDate>Thu, 16 Mar 2017 18:24:36 +0000</lastBuildDate>
    
	<atom:link href="https://chuxinshequ.github.io/categories/%E5%BC%80%E6%BA%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Android蓝牙通信——AndroidBluetoothManager</title>
      <link>https://chuxinshequ.github.io/blog/2017/03/16/2017-03-16-android-%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1androidbluetoothmanager.html</link>
      <pubDate>Thu, 16 Mar 2017 18:24:36 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/2017/03/16/2017-03-16-android-%E8%93%9D%E7%89%99%E9%80%9A%E4%BF%A1androidbluetoothmanager.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN

To get a Git project into your build:
Step 1. Add the JitPack repository to your build file
Add it in your root build.gradle at the end of repositories:
allprojects { repositories { ... maven { url &#39;https://jitpack.io&#39; } } }  Step 2. Add the dependency
dependencies { compile &#39;com.github.kongqw:AndroidBluetoothManager:1.0.0&#39; }  AndroidBluetoothManager
效果图 PNG
GIF
基础功能 添加权限 &amp;lt;uses-permission android:name=&amp;quot;android.permission.BLUETOOTH&amp;quot; /&amp;gt; &amp;lt;uses-permission android:name=&amp;quot;android.</description>
    </item>
    
    <item>
      <title>Android自定义雷达扫描控件</title>
      <link>https://chuxinshequ.github.io/blog/2017/03/10/2017-03-10-android%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9B%B7%E8%BE%BE%E6%89%AB%E6%8F%8F%E6%8E%A7%E4%BB%B6.html</link>
      <pubDate>Fri, 10 Mar 2017 18:28:14 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/2017/03/10/2017-03-10-android%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9B%B7%E8%BE%BE%E6%89%AB%E6%8F%8F%E6%8E%A7%E4%BB%B6.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN
Android 雷达扫描控件 
To get a Git project into your build:
Step 1. Add the JitPack repository to your build file
Add it in your root build.gradle at the end of repositories:
allprojects { repositories { ... maven { url &#39;https://jitpack.io&#39; } } }  Step 2. Add the dependency
dependencies { compile &#39;com.github.kongqw:AndroidRadarScanView:1.0.1&#39; }  源码：AndroidRadarScanView
效果图 XML &amp;lt;com.kongqw.radarscanviewlibrary.RadarScanView android:id=&amp;quot;@+id/radarScanView&amp;quot; android:layout_width=&amp;quot;match_parent&amp;quot; android:layout_height=&amp;quot;match_parent&amp;quot; /&amp;gt;  初始化 radarScanView = (RadarScanView) findViewById(R.</description>
    </item>
    
    <item>
      <title>打造简洁高效的动态权限管理器</title>
      <link>https://chuxinshequ.github.io/blog/2017/02/16/2017-02-16-%E6%89%93%E9%80%A0%E7%AE%80%E6%B4%81%E9%AB%98%E6%95%88%E7%9A%84%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%99%A8.html</link>
      <pubDate>Thu, 16 Feb 2017 10:50:45 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/2017/02/16/2017-02-16-%E6%89%93%E9%80%A0%E7%AE%80%E6%B4%81%E9%AB%98%E6%95%88%E7%9A%84%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%99%A8.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN
效果图
GitHub地址：PermissionsManager
随着Android 6.0的普及，动态权限的重要性也开始时慢慢体现出来。为了更好的保护用户隐私，Android 6.0要求在进行敏感操作之前，必须要向用户请示申请权限。
如何使用，在之前的文章里也已经介绍过了，但是用起来比较麻烦。Android6.0动态获取权限
我希望可以封装一下，使用之前创建一个动态权限的管理对象，他有两个回调来告诉我权限申请成功或者失败，像这样：
mPermissionsManager = new PermissionsManager(this) { @Override public void authorized(int requestCode) { // TODO 权限通过 } @Override public void noAuthorization(int requestCode, String[] lacksPermissions) { // TODO 有权限没有通过 } };  使用的时候，可以直接调用一个方法，把要请示的权限传进去就可以进行校验，像这样：
// 检查权限 mPermissionsManager.checkPermissions(&amp;quot;请求码&amp;quot;, &amp;quot;要校验的权限&amp;quot;);  于是乎，下面封装的动态权限管理器就来了：
动态权限管理器 package com.kongqw.permissionslibrary; import android.app.Activity; import android.content.Context; import android.content.Intent; import android.content.pm.PackageManager; import android.net.Uri; import android.provider.Settings; import android.support.annotation.NonNull; import android.support.v4.app.ActivityCompat; import android.support.v4.content.ContextCompat; import java.</description>
    </item>
    
    <item>
      <title>OpenCV&#43;JavaCV实现人脸识别</title>
      <link>https://chuxinshequ.github.io/blog/2016/09/09/2016-09-09-opencv-javacv%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB.html</link>
      <pubDate>Fri, 09 Sep 2016 16:29:53 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/2016/09/09/2016-09-09-opencv-javacv%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN
OpenCV主要实现人脸检测功能
JavaCV主要实现人脸对比功能
具体的就不啰嗦了，本来最近很忙，主要是因为好多人私信我要 Android使用OpenCV实现「人脸检测」和「人脸识别」 的Demo，今天特意抽出时间写了一下。
效果图 源码 KqwFaceDetectionDemo
感觉有用的话，就给个star吧，谢谢！！
注意 最后啰嗦一点，如果你的程序是跑在手机、pad等设备上，一般没有什么问题。 但是如果你是在自己的开发板上跑，可能会有一些小插曲。
比如我司的机器人是定制的Android板子，对系统做了裁剪，很多摄像头的方法可能就用不了
例如这样一个错误
AndroidRuntime: java.lang.RuntimeException: setParameters failed  当打开程序的时候，OpenCV会提示，没有找到可用摄像头或者摄像头被锁住（大概这个意思，我就不截图了），一种可能是设备真的没有接摄像头，也有可能是摄像头定制过，导致某些方法用不了，比如上面的错误就是我遇到的其中一个。</description>
    </item>
    
    <item>
      <title>Android自定义摇杆</title>
      <link>https://chuxinshequ.github.io/blog/2016/09/01/2016-09-01-android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%91%87%E6%9D%86.html</link>
      <pubDate>Thu, 01 Sep 2016 17:37:11 +0000</pubDate>
      
      <guid>https://chuxinshequ.github.io/blog/2016/09/01/2016-09-01-android%E8%87%AA%E5%AE%9A%E4%B9%89%E6%91%87%E6%9D%86.html</guid>
      <description>转载请说明出处！ 作者：kqw攻城狮 出处：个人站 | CSDN
效果图 源码 KqwRockerDemo
喜欢就给个star，谢谢！
功能  支持自适应大小 支持2个方向、4个方向、8个方向的摇动监听 支持摇动角度获取 可选回调模式 支持可摇动区域自定义 支持摇杆自定义 支持设置图片、色值、Shape图形  使用 &amp;lt;kong.qingwei.rockerlibrary.RockerView android:id=&amp;quot;@+id/rockerView_center&amp;quot; android:layout_width=&amp;quot;100dp&amp;quot; android:layout_height=&amp;quot;100dp&amp;quot; android:layout_centerHorizontal=&amp;quot;true&amp;quot; kongqw:areaBackground=&amp;quot;#FF333333&amp;quot; kongqw:rockerBackground=&amp;quot;#FF987654&amp;quot; kongqw:rockerRadius=&amp;quot;15dp&amp;quot; /&amp;gt;  参数    参数 是否必须 描述     areaBackground 可选 可摇动区域的背景   rockerBackground 可选 摇杆的背景   rockerRadius 可选 摇杆半径    设置回调方式 setCallBackMode(CallBackMode mode)  参数
   回调方式 描述     CALL_BACK_MODE_MOVE 有移动就立刻回调   CALL_BACK_MODE_STATE_CHANGE 状态有变化的时候回调    监听摇动角度 返回角度的取值范围：[0°,360°)</description>
    </item>
    
  </channel>
</rss>